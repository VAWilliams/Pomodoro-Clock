{"version":3,"sources":["LengthController.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["LengthController","console","log","this","props","type","value","increment","decrement","lowerType","toLowerCase","className","id","onClick","Component","Timer","state","timerId","start","bind","pause","reset","clockify","setState","setInterval","nothing","time","toggleState","decrementTime","document","getElementById","play","clearInterval","audio","currentTime","minutes","seconds","currentState","Math","floor","App","breakLength","sessionLength","incrementBreak","incrementSession","decrementBreak","decrementSession","nextState","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2307cb78.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nclass LengthController extends Component {\r\n\r\n    componentDidMount() {\r\n      console.log('Length Component has Mounted.');\r\n    }\r\n    \r\n    render() {\r\n        let { type, value, increment, decrement } = this.props;\r\n        let lowerType = type.toLowerCase();\r\n        return (\r\n            <div className=\"length-controller\">\r\n                <h3 id={`${lowerType}-label`}>{`${type} Length`}</h3>\r\n                <button\r\n                    id={`${lowerType}-increment`}\r\n                    className=\"btn btn-primary\"\r\n                    onClick={increment}\r\n                >\r\n                    <i className=\"fa fa-arrow-up\"></i>\r\n                </button>\r\n                <span id={`${lowerType}-length`}>{value}</span>\r\n                <button\r\n                    id={`${lowerType}-decrement`}\r\n                    className=\"btn btn-primary\"\r\n                    onClick={decrement}\r\n                >\r\n                    <i className=\"fa fa-arrow-down\"></i>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LengthController;","import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        timerId: null\r\n      };\r\n      \r\n      this.start = this.start.bind(this);\r\n      this.pause = this.pause.bind(this);\r\n      this.reset = this.reset.bind(this);\r\n      this.clockify = this.clockify.bind(this);\r\n    }\r\n    start() {\r\n        if(this.state.timerId) {\r\n            this.pause();\r\n            return;\r\n        }\r\n        this.setState({\r\n          timerId: setInterval(nothing => {\r\n            let { time, toggleState, decrementTime } = this.props;\r\n            if(time === 0) {\r\n              toggleState();\r\n              let audio = document.getElementById(\"beep\");\r\n              audio.play();\r\n            }\r\n            decrementTime();\r\n          }, 1000)\r\n        });\r\n    }\r\n    pause() {\r\n        this.setState(state => {\r\n            let { timerId } = state;\r\n            clearInterval(timerId);\r\n            this.setState({ timerId: null });\r\n            return state;\r\n        })\r\n    }\r\n    reset() {\r\n        this.pause();\r\n        let audio = document.getElementById(\"beep\");\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n        this.setState((state, props) => {\r\n            props.reset();\r\n            return state;\r\n        });\r\n    }\r\n    \r\n    clockify(minutes, seconds) {\r\n      minutes = minutes < 10 ? '0' + minutes : minutes;\r\n      seconds = seconds < 10 ? '0' + seconds : seconds;\r\n  \r\n      return minutes + ':' + seconds;\r\n    }\r\n    \r\n    componentDidMount() {\r\n      console.log('Timer Component has Mounted.');\r\n    }\r\n    \r\n    render() {\r\n      let { time, currentState } = this.props;\r\n      let minutes = Math.floor(time / 60);\r\n      let seconds = (time - (minutes * 60));\r\n      return (\r\n        <div>\r\n          <div id=\"clock\">\r\n            <h2 id=\"timer-label\">{currentState}</h2>\r\n            <h1 id=\"time-left\" className=\"time\">\r\n              {this.clockify(minutes, seconds)}\r\n            </h1>\r\n          </div>\r\n          <div id=\"buttons\">\r\n            <button id=\"start_stop\" className=\"btn btn-primary\" onClick={this.start}>\r\n              <i className=\"fa fa-play\"></i>\r\n              <i className=\"fa fa-pause\"></i>\r\n            </button>\r\n            <button id=\"reset\" className=\"btn btn-primary\" onClick={this.reset}>\r\n              <i className=\"fa fa-retweet\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport LengthController from './LengthController';\nimport Timer from './Timer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentState: 'Session',\n      breakLength: 5,\n      sessionLength: 25,\n      time: 1500\n    };\n    \n    this.reset            = this.reset.bind(this)      ;\n    this.toggleState      = this.toggleState.bind(this);\n    this.decrementTime    = this.decrementTime.bind(this) ;                                \n    this.incrementBreak   = this.incrementBreak.bind(this);\n    this.incrementSession = this.incrementSession.bind(this);\n    this.decrementBreak   = this.decrementBreak.bind(this);\n    this.decrementSession = this.decrementSession.bind(this);\n  }\n  \n  reset() {\n    this.setState({\n        currentState: 'Session',\n        breakLength: 5,\n        sessionLength: 25,\n        time: 1500\n    });\n  }\n  \n  toggleState() {\n    this.setState(state => {\n      let { currentState } = state;\n      let nextState = currentState === 'Session' ? 'Break' : 'Session';\n      return {\n        currentState: nextState,\n        time: (state[nextState.toLowerCase() + 'Length'] * 60) + 1\n      };\n    })\n  }\n  \n  decrementTime() {\n    this.setState(state => {\n      let { time } = state;\n      if(time === 0) return state;\n      return { time: time - 1 }\n    });\n  }\n  \n  incrementBreak() {\n    this.setState(state => {\n      let { breakLength } = state;\n      if(breakLength === 60) return state;\n      return { breakLength: breakLength + 1 }\n    });\n  }\n  incrementSession() {\n    this.setState(state => {\n      let { sessionLength } = state; \n      if(sessionLength === 60) return state;\n      return {\n        sessionLength: sessionLength + 1,\n        time: (sessionLength + 1) * 60\n      }\n    });\n  }\n  decrementBreak() {\n    this.setState(state => {\n      let { breakLength } = state;\n      if(breakLength === 1) return state;\n      return { breakLength: breakLength - 1 }\n    });\n  }\n  decrementSession() {\n    this.setState(state => {\n      let { sessionLength } = state;\n      if(sessionLength === 1) return state;\n      return {\n        sessionLength: sessionLength - 1,\n        time: (sessionLength - 1) * 60\n      }\n    });\n  }\n\n  componentDidMount() {\n    console.log('App Component has Mounted.');\n  }\n  \n  render() {\n    let {\n      time,\n      currentState,\n      breakLength,\n      sessionLength\n    } = this.state;\n    return (\n      <div>\n        <h1>Pomodoro Clock</h1>\n        <div id=\"controllers\">\n          <LengthController\n            type=\"Break\"\n            value={breakLength}\n            increment={this.incrementBreak}\n            decrement={this.decrementBreak}\n\n        />\n        <LengthController\n            type=\"Session\"\n            value={sessionLength}\n            increment={this.incrementSession}\n            decrement={this.decrementSession}\n        />\n        </div>\n        <Timer\n          time={time}\n          reset={this.reset}\n          toggleState={this.toggleState}\n          decrementTime={this.decrementTime}\n          currentState={currentState}\n          sessionLength={sessionLength}\n          breakLength={breakLength}\n        />\n        <audio\n          id=\"beep\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        ></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}